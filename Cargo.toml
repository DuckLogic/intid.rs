[workspace.package]
version = "0.3.0-rc.2"
repository = "https://github.com/DuckLogic/intid.rs"
authors = ["Techcable <git@techcable.net>"]
readme = "README.md"
license = "MIT OR Apache-2.0"
# 1.56 - 2021 edition
# 1.61 - Vec::retain_mut
# 1.64 - workspace.package
# 1.65 - GAT
# 1.68 - sparse index
#
# if changed, keep in sync with CI
rust-version = "1.65"
edition = "2021"

[workspace]
resolver = "2"
members = ["intid", "idmap", "intid-allocator", "crates/*"]

[workspace.dependencies]
# crate dependencies
intid-derive = { path  = "crates/intid-derive", version = "0.3.0-rc.2" }
intid = { path  = "intid", version = "0.3.0-rc.2" }

[workspace.lints.rust]
missing-docs = "deny"
unsafe-op-in-unsafe-fn = "deny"

[workspace.lints.clippy]
## groups ##
cargo = { priority = -1, level = "warn" }
pedantic = { level = "warn", priority = -1 }

# restrictions
alloc_instead_of_core = "deny"
std_instead_of_alloc = "deny"
std_instead_of_core = "deny"
redundant_test_prefix = "warn" # name test_foo is redundant with #[test] attr

# safety
undocumented_unsafe_blocks = "deny"
multiple_unsafe_ops_per_block = "deny"

## aggressively lint casts ##
# in an ideal world, overflowing casts would panic
# linting them (with deny) is the second best option
cast-possible-truncation = "deny"
cast-possible-wrap = "deny"
cast-precision-loss = "deny"
cast-sign-loss = "deny"
char-lit-as-u8 = "deny"
cast-ptr-alignment = "deny"
fn-to-numeric-cast = "deny"
fn-to-numeric-cast-any = "deny"
fn-to-numeric-cast-with-truncation = "deny"
cast-lossless = "allow" # lossless casts are fine, lints will catch if types change
ptr_as_ptr = "allow" # pointer casts are fine as long as they don't violate another rule

#
# excessively pedantic (even for clippy::pedantic)
#
too-many-lines = "allow"
# We don't put #[must_use] on len
must-use-candidate = "allow"
